# scripts/full_reset.py
import sys
import os
from sqlalchemy import text
from app import create_app, db
from app.models import Product

app = create_app()

def reset_and_populate():
    with app.app_context():
        # 1. Cr√©er les tables d'abord
        print("üì¶ Cr√©ation des tables...")
        db.create_all()

        # 2. Puis seulement reset
        database_url = app.config['SQLALCHEMY_DATABASE_URI']

        if database_url.startswith("sqlite"):
            print("‚ö° Base SQLite d√©tect√©e ‚ûî DELETE FROM...")
            try:
                db.session.execute(text("DELETE FROM products;"))
                db.session.commit()
            except Exception as e:
                print(f"‚ùå Erreur DELETE : {e}")
        else:
            print("‚ö° Base PostgreSQL d√©tect√©e ‚ûî TRUNCATE TABLE...")
            db.session.execute(text("TRUNCATE TABLE products RESTART IDENTITY CASCADE;"))
            db.session.commit()

        print("‚úÖ Table products vid√©e.")

        # 3. Puis seulement ins√©rer
        produits = [
            Product(name="Machine √† Caf√©", description="Machine professionnelle pour pr√©paration de caf√©s gourmets", price=250.0),
            Product(name="Caf√© Latt√©", description="Un d√©licieux caf√© au lait", price=3.5),
            Product(name="Espresso", description="Un caf√© noir intense", price=2.0),
            Product(name="Cappuccino", description="Un cappuccino mousseux italien", price=4.0),
            Product(name="Th√© Vert", description="Un th√© vert bio rafra√Æchissant", price=2.5),
            Product(name="Chocolat Chaud", description="Chocolat chaud r√©confortant", price=3.0)
        ]

        db.session.add_all(produits)
        db.session.commit()
        print("‚úÖ Produits de test ins√©r√©s avec succ√®s.")

if __name__ == "__main__":
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    reset_and_populate()
