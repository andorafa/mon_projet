name: Flutter Android CI/CD

on:
  push:
    branches: [mobile-app-secours]
  pull_request:
    branches: [mobile-app-secours]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Tests & Deploy APK

    env:
      #KEYSTORE_PATH: android/app/key.jks
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    steps:
      # 📥 Récupérer le code source
      - name: Checkout source code
        uses: actions/checkout@v3


      # 🔎 Debug : Lister les assets présents
      - name: 📂 Lister les fichiers assets
        run: ls -R images

      # ⚙️ Configurer Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'

      # 🧹 Nettoyer le projet Flutter
      - name: Clean Flutter project
        run: flutter clean

      # 📦 Installer les dépendances
      - name: Install Flutter dependencies
        run: flutter pub get

      # 🧪 Exécuter les tests unitaires
      - name: Run tests
        run: flutter test

        # 📱 Lancer un émulateur Android pour les tests d'intégration
      - name: 🤖 Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: Nexus 6
          script: |
            adb devices
            adb wait-for-device
            
            echo "🔄 Tentative de suppression de l'app s'il en existe une ancienne version"
            adb uninstall com.example.test_app || true
  

            adb shell getprop sys.boot_completed
            echo "✅ Émulateur lancé avec succès"
            
            # 🐢 Petit délai supplémentaire pour garantir la stabilité
            sleep 5

            # 🧪 Tests d'intégration
            flutter test integration_test --dart-define=USE_MOCK_SCANNER=true || exit 1
            
            # 📸 Tentative de capture d'écran (facultative)
            echo "Tentative de capture d'écran..."
            
            adb shell screencap -p /data/local/tmp/screen.png || echo "⚠️ Capture échouée"
            adb pull /data/local/tmp/screen.png screen.png || echo "⚠️ Pull échoué ou fichier inexistant"


      # 💾 (Optionnel) Récupérer la capture d’écran pour debug
      - name: 🖼️ Upload emulator screenshot
        uses: actions/upload-artifact@v4
        with:
          name: emulator-screen
          path: screen.png

      # 🔐 Restaurer le keystore à partir du secret encodé
      - name: Decode keystore from secret
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/key.jks


      - name: Create key.properties file
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties


      # 🛠️ Fix PATH for sdkmanager
      - name: Set ANDROID_HOME and update PATH
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      # ✅ Accept licenses + install correct NDK
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Install NDK 27.0.12077973
        run: sdkmanager "ndk;27.0.12077973"

      # 🏗️ Construire l’APK signé
      - name: Build signed APK
        run: flutter build apk --release
        #run: flutter build apk --release --no-enable-impeller
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 📎 Upload de l’APK comme artifact GitHub
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk

      # 🚀 Déploiement Firebase App Distribution
      - name: Deploy to Firebase App Distribution
        run: |
          curl -sL https://firebase.tools | bash
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --groups "testers"