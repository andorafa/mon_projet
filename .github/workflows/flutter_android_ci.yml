name: Flutter Android CI/CD

on:
  push:
    branches: [mobile-app-secours]
  pull_request:
    branches: [mobile-app-secours]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Tests & Deploy APK

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Run unit tests
        run: flutter test

      - name: 🤖 Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          target: google_apis
          profile: Nexus 5
          script: |
            adb devices
            adb wait-for-device
            echo "🔄 Redémarrage du serveur ADB pour stabiliser la connexion..."
            adb kill-server
            adb start-server
            adb devices
            adb wait-for-device
            
            echo "⏳ Attente que l'émulateur soit complètement initialisé..."
            until [[ "$(adb shell getprop sys.boot_completed | tr -d '\r')" == "1" ]]; do
              echo "… boot non terminé …"
              sleep 2
            done

            until adb shell pm list packages > /dev/null 2>&1; do
              echo "… Package Manager non prêt …"
              sleep 2
            done

            echo "✅ Émulateur prêt et services disponibles"
            sleep 5
            
            
            echo "🧪 Lancement des tests d'intégration..."
            if flutter test integration_test --dart-define=USE_MOCK_SCANNER=true; then
                echo "✅ Tests d'intégration réussis"
            else
                echo "❌ Échec des tests d'intégration"
                exit 1
            fi
            
            
            echo "Tentative de capture d'écran..."
            adb shell screencap -p /data/local/tmp/screen.png || echo "⚠️ Capture échouée"
            adb pull /data/local/tmp/screen.png screen.png || echo "⚠️ Pull échoué ou fichier inexistant"
            
            
            echo "🛑 Fermeture de l'émulateur"
            adb emu kill || echo "⚠️ Erreur lors de la fermeture de l'émulateur ignorée"
            adb kill-server || true
            

      - name: 🖼️ Upload emulator screenshot
        uses: actions/upload-artifact@v4
        with:
          name: emulator-screen
          path: screen.png

      - name: Decode keystore from secret
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/key.jks

      - name: Create key.properties file
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=key.jks" >> android/key.properties

      - name: Set ANDROID_HOME and update PATH
        run: |
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Install NDK 27.0.12077973
        run: sdkmanager "ndk;27.0.12077973"

      - name: Build signed APK
        run: flutter build apk --release
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Deploy to Firebase App Distribution
        run: |
          curl -sL https://firebase.tools | bash
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --groups "testers"
