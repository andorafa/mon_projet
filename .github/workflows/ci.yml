name: CI/CD - Tests unitaires, Couverture, SonarCloud, Sécurité, Déploiement

on:
  push:
    branches: [main, creation-apirest]
  pull_request:
    branches: [main, creation-apirest]

jobs:
  tests:
    name: ✅ Tests unitaires + Couverture
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.2'

      - name: 📦 Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Lancer les tests avec coverage
        run: |
          export PYTHONPATH=$(pwd)
          coverage run -m pytest tests/
          coverage xml

      - name: 📦 Upload coverage report (pour SonarCloud)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: 📤 Envoyer la couverture à Codecov (facultatif)
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

  sonarcloud:
    name: 🧠 Analyse SonarCloud (main uniquement)
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout complet du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📥 Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: 🔍 Exécuter SonarCloud Scanner
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=app
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 🛑 Vérification de la Quality Gate
        run: |
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          ce_task_id=$(grep 'ceTaskId=' .scannerwork/report-task.txt | cut -d'=' -f2)

          echo "📄 ceTaskId : $ce_task_id"

          for i in {1..20}; do
            echo "🔄 Tentative $i : récupération de l'analyse..."
            response=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/ce/task?id=$ce_task_id")
            status=$(echo "$response" | jq -r '.task.status')

            if [ "$status" = "SUCCESS" ]; then
              analysis_id=$(echo "$response" | jq -r '.task.analysisId')
              echo "✅ Analyse terminée : $analysis_id"
              break
            fi

            echo "⏳ En attente... ($status)"
            sleep 10
          done

          if [ -z "$analysis_id" ] || [ "$analysis_id" = "null" ]; then
            echo "❌ Échec : analyse introuvable après 20 tentatives"
            exit 1
          fi

          echo "📡 Quality Gate check..."
          result=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysis_id")
          gate_status=$(echo "$result" | jq -r '.projectStatus.status')

          echo "🎯 Quality Gate: $gate_status"

          if [ "$gate_status" != "OK" ]; then
            echo "❌ Quality Gate échouée. CI stoppée."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  bandit:
    name: 🔒 Analyse de sécurité Bandit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: 📦 Installer Bandit
        run: pip install bandit

      - name: 🔎 Scanner le dossier app
        run: bandit -r app -ll

  deploy:
    name: 🚀 Déploiement Render
    runs-on: ubuntu-latest
    needs: [tests, bandit]
    if: github.ref == 'refs/heads/creation-apirest' && github.event_name == 'push'

    steps:
      - name: 📡 Appeler le hook Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  populate-db:
    name: 🗃️ Peuplement de la base de données
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/creation-apirest'

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.2'

      - name: 📦 Installer les dépendances
        run: pip install -r requirements.txt

      - name: ▶️ Exécuter full_reset.py
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          export PYTHONPATH=$(pwd)
          python scripts/full_reset.py
